{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card_list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","user","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8RAIaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBACIC,UAAU,SACVC,KAAK,SACLH,YAAcA,EACdI,SAAUH,KCNLI,G,MAAO,SAACC,GAAD,OAEpB,sBAAKJ,UAAY,iBAAjB,UACA,qBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEtB,mCAAMJ,EAAMG,QAAQE,KAApB,OACA,6BAAKL,EAAMG,QAAQG,QAJnB,sCCDaC,G,MAAW,SAACP,GAAD,OAExB,qBAAKJ,UAAU,YAAf,SACKI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WC4CZM,G,wDA9Cb,aAAc,IAAD,8BACX,gBAqBFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SArBrC,EAAKC,MAAO,CACVR,SAAS,GACTK,YAAY,IAJH,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CAGLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACJ,SAAUa,S,oBAW3C,WAEE,MAAiCC,KAAKN,MAA/BR,EAAP,EAAOA,SAAUK,EAAjB,EAAiBA,YACXU,EAAmBf,EAASgB,QAAO,SAAArB,GAAO,OAC/CA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAEjD,OACE,sBAAK7B,UAAU,MAAf,UACE,mDACF,cAAC,EAAD,CACIF,YAAY,kBACZC,aAAc2B,KAAK3B,eAGrB,cAAC,EAAD,CAAUa,SAAUe,W,GAzCRI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.961328df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './search_box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n\r\n    <input \r\n        className='search'\r\n        type='search'\r\n        placeholder={ placeholder}\r\n        onChange={handleChange}\r\n    />\r\n \r\n\r\n\r\n)","import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card = (props) =>(\r\n\r\n<div className = \"card-container\">\r\n<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n    \r\n<h2> {props.monster.name} </h2>\r\n<h3>{props.monster.email}</h3>\r\nconsole.log(props.monster.id);\r\n\r\n\r\n</div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = (props) => (\r\n    \r\n<div className=\"card-list\">\r\n    {props.monsters.map(monster =>(\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n);","//import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport { SearchBox } from './components/search-box/search-box.component'\nimport { CardList } from './components/card_list/card-list.component'\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state ={\n      monsters:[],\n      searchField:''\n    };\n\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    //fetch('http://www.omdbapi.com/?i=tt3896198&apikey=79fd7644')\n  \n    .then(response => response.json())\n    .then(user => this.setState({monsters: user}))\n    \n  }\n\n  \n\n\n  handleChange = (e) =>{\n    this.setState({searchField: e.target.value});\n  }\n\nrender(){\n  \n  const {monsters, searchField } = this.state;\n  const filteredMonsters = monsters.filter(monster =>\n   monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n  return (\n    <div className=\"App\">\n      <h1> Monster Roledex </h1>  \n    <SearchBox\n        placeholder='search monsters' \n        handleChange={this.handleChange}\n      />\n    \n      <CardList monsters={filteredMonsters} />\n       \n    </div>\n  );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}